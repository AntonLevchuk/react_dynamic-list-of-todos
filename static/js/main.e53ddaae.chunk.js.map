{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","setSelectedUserId","useState","filterByTitle","setFilterByTitle","isComplete","setIsComplete","visibleTodos","setVisibleTodos","useEffect","filter","todo","titleToLower","title","toLowerCase","filterByTitleToLower","includes","completed","className","value","onChange","target","type","name","map","checked","readOnly","onClick","userId","id","API_URL","request","url","postfix","a","fetch","response","json","CurrentUser","clearUser","currentUser","setCurrentUser","errorLoad","setErrorLoad","fetchUser","useCallback","newUser","email","App","selectedUserId","setTodos","getData","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e53ddaae.chunk.js","sourcesContent":["import React, { useState, useEffect, Dispatch } from 'react';\n\nimport './TodoList.scss';\n\ninterface Props {\n  todos: Todo[];\n  setSelectedUserId: Dispatch<number>,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  setSelectedUserId,\n}) => {\n  const [filterByTitle, setFilterByTitle] = useState<string>('');\n  const [isComplete, setIsComplete] = useState('show all');\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n\n  useEffect(() => {\n    setVisibleTodos(todos.filter(todo => {\n      const titleToLower = todo.title.toLowerCase();\n      const filterByTitleToLower = filterByTitle.toLowerCase();\n\n      switch (isComplete) {\n        case 'show all':\n          return titleToLower.includes(filterByTitleToLower);\n\n        case 'not completed':\n          return titleToLower.includes(filterByTitleToLower)\n            && todo.completed === false;\n\n        case 'completed':\n          return titleToLower.includes(filterByTitleToLower)\n            && todo.completed === true;\n\n        default:\n          return todo;\n      }\n    }));\n  }, [filterByTitle, isComplete, todos]);\n\n  return (\n    <div className=\"todoList\">\n      <h2 className=\"todoList__title\">Todos:</h2>\n\n      <div className=\"todoList__sort\">\n        <label className=\"todoList__label\">\n          Sort by title:\n          <input\n            data-cy=\"filterByTitle\"\n            className=\"todoList__input\"\n            value={filterByTitle}\n            onChange={({ target }) => {\n              setFilterByTitle(target.value);\n            }}\n            type=\"text\"\n          />\n        </label>\n\n        <label className=\"todoList__label\">\n          Sort by status:\n          <select\n            className=\"TodoList__input\"\n            name=\"isCompleted\"\n            onChange={({ target }) => {\n              setIsComplete(target.value);\n            }}\n          >\n            <option value=\"show all\" className=\"todoList__option\">\n              Show all\n            </option>\n\n            <option value=\"not completed\" className=\"todoList__option\">\n              Not completed\n            </option>\n\n            <option value=\"completed\" className=\"todoList__option\">\n              Completed\n            </option>\n          </select>\n        </label>\n      </div>\n\n      <div className=\"todoList__list-container\">\n        <ul className=\"todoList__list\">\n          {visibleTodos.map(todo => {\n            return (\n              <li\n                key={todo.id}\n                className={`todoList__item\n                todoList__item--${todo.completed ? 'checked' : 'unchecked'}`}\n              >\n                <label>\n                  <input\n                    checked={todo.completed}\n                    type=\"checkbox\"\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  type=\"button\"\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  onClick={() => setSelectedUserId(todo.userId)}\n                >\n                  {todo.userId}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api/';\n\nconst request = async (url: string, postfix: string) => {\n  const response = await fetch(`${url}${postfix}`);\n\n  return response.json();\n};\n\nexport const getTodos = () => request(API_URL, 'todos');\nexport const getUsers = (id:number) => request(API_URL, `users/${id}`);\n","import React, { useState, useCallback, useEffect } from 'react';\nimport './CurrentUser.scss';\n\nimport { getUsers } from '../../api/api';\n\ntype Props = {\n  userId: number;\n  clearUser: () => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId,\n  clearUser,\n}) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [errorLoad, setErrorLoad] = useState<boolean | null>(null);\n\n  const fetchUser = useCallback(async () => {\n    try {\n      const newUser = await getUsers(userId);\n\n      setCurrentUser(newUser);\n      setErrorLoad(null);\n    } catch {\n      setCurrentUser(null);\n      setErrorLoad(true);\n    }\n  }, [userId]);\n\n  useEffect(() => {\n    fetchUser();\n  }, [userId]);\n\n  return (\n    <>\n      {currentUser && (\n        <div className=\"currentUser\">\n          <h2 className=\"currentUser__title\">\n            <span>\n              {`Selected user: ${currentUser.id}`}\n            </span>\n          </h2>\n\n          <h3 className=\"currentUser__name\">\n            {currentUser.name}\n          </h3>\n\n          <p className=\"currentUser__email\">\n            {currentUser.email}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"currentUser__clear\"\n            onClick={clearUser}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n\n      {errorLoad && (\n        <div className=\"currentUser\">\n          <span>\n            <h2 className=\"currentUser__title\">Opps! try again please</h2>\n          </span>\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const clearUser = useCallback(() => setSelectedUserId(0), []);\n\n  const getData = async () => {\n    const data = await getTodos();\n\n    setTodos(data);\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          setSelectedUserId={setSelectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={clearUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}